Задание №1

from timeit import timeit


def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr

print(timeit(stmt= 'func_1([10])', globals=globals(), number= 100))


def func_2(nums):
        my_lst = list(range(len(nums)))
        return my_lst

print(timeit(stmt='func_2([10])', globals=globals(), number=100))


"""
Итератор с конкатенацией заменён на встроенную функцию range.
Что уменьшило скорость выполнения с 0.00021523400027945172 до 0.00019758099915634375.
"""

Задание №2
from timeit import timeit
from random import randint


def recursive_reverse(number):
    if number == 0:
        return str(number % 10)
    return f'{str(number % 10)}{recursive_reverse(number // 10)}'


num_100 = randint(10000, 1000000)
num_1000 = randint(1000000, 10000000)
num_10000 = randint(100000000, 10000000000000)

print('Не оптимизированная функция recursive_reverse')
print(
    timeit(
        "recursive_reverse(num_100)",
        setup='from __main__ import recursive_reverse, num_100',
        number=10000))
print(
    timeit(
        "recursive_reverse(num_1000)",
        setup='from __main__ import recursive_reverse, num_1000',
        number=10000))
print(
    timeit(
        "recursive_reverse(num_10000)",
        setup='from __main__ import recursive_reverse, num_10000',
        number=10000))


def memoize(f):
    cache = {}

    def decorate(*args):

        if args in cache:
            return cache[args]
        else:
            cache[args] = f(*args)
            return cache[args]
    return decorate


@memoize
def recursive_reverse_mem(number):
    if number == 0:
        return ''
    return f'{str(number % 10)}{recursive_reverse_mem(number // 10)}'


print('Оптимизированная функция recursive_reverse_mem')
print(
    timeit(
        'recursive_reverse_mem(num_100)',
        setup='from __main__ import recursive_reverse_mem, num_100',
        number=10000))
print(
    timeit(
        'recursive_reverse_mem(num_1000)',
        setup='from __main__ import recursive_reverse_mem, num_1000',
        number=10000))
print(
    timeit(
        'recursive_reverse_mem(num_10000)',
        setup='from __main__ import recursive_reverse_mem, num_10000',
        number=10000))


"""
Если исходить из временных значений то оптимизация при помощи memoize необходима 
Не оптимизированная функция recursive_reverse
0.020113211000534648
0.023476917000152753
0.033555158999661217
Оптимизированная функция recursive_reverse_mem
0.001552685000206111
0.0021707860005335533
0.002346996000596846
Но вспоминая о том, что из трех качеств (Скорость =, локоничность, память), выбрать можно два, 
мы можем утверждать, что ускоряя скорость решения, мы загружаем память, что не является лучшим способом оптимизации
"""

Задание №3
from timeit import timeit

def revers(enter_num, revers_num=0):
    if enter_num == 0:
        return
    else:
        num = enter_num % 10
        revers_num = (revers_num + num / 10) * 10
        enter_num //= 10
        revers(enter_num, revers_num)


print(timeit("revers(123)", setup='from __main__ import revers',
        number=10000))

def revers_2(enter_num, revers_num=0):
    while enter_num != 0:
        num = enter_num % 10
        revers_num = (revers_num + num / 10) * 10
        enter_num //= 10
    return revers_num

print(timeit("revers_2(10)", setup='from __main__ import revers_2',
        number=10000))

def revers_3(enter_num):
    enter_num = str(enter_num)
    revers_num = enter_num[::-1]
    return revers_num

print(timeit("revers_3(10)", setup='from __main__ import revers_3',
        number=10000))

def revers_4(enter_num):
    enter_num = str(enter_num)
    a = ''.join(reversed(enter_num))
    return a

print( timeit("revers_4(10)", setup='from __main__ import revers_4',
        number=10000))

"""
Эффективней всех оказалась функция 3.
Поскольку использует встроенную функцию и линейную операцию
"""

Задание №4

from timeit import timeit

array = [1, 3, 1, 3, 4, 5, 1]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    freq = dict((i, array.count(i)) for i in set(array))
    return f'Чаще всего встречается число {freq}, ' \
           f'оно появилось в массиве {freq[1]} раз(а)'

print(func_1())
print(func_2())
print(func_3())

print(timeit("func_1()", setup='from __main__ import func_1',
        number=10000))
print(timeit("func_2()", setup='from __main__ import func_2',
        number=10000))
print(timeit("func_3()", setup='from __main__ import func_3',
        number=10000))

"""
Вариант 1 поскольку у него самая низкая сложность и использует встроенную функцию count
"""
